const pdf = require('html-pdf');
const fs = require('fs');
const path = require('path');
const moment = require('moment')

const {replaceAll} = require('./helpers')

moment.locale('ES');

const generatePDF = (config) => {

    const {filename, project_folder, serverName, from, to, include_weekends} = config

    const formated_from = moment(from).format('DD [de] MMMM')
    const formated_to = moment(to).format('DD [de] MMMM')

    //  Paths to folders

    //  The assets_folder is where all charts will be taken from and where the doc will be generated.
    //  These assets were previously generated by this application.
    let assets_folder = path.join(project_folder, 'assets')

    //  The template folder is part of the source code. it will not change so I can be included in the compilation that is why I used __dirname
    const template_folder = path.join(__dirname, '..', 'templates')
    
    let html_template = fs.readFileSync(`${template_folder}/pdf_document.html`, 'utf8') 

    //  Query the img/days folder to get all the files

    let image_files = fs.readdirSync(`${assets_folder}/charts/days`)

    //  Filter by start date, end date and weekends
    
    image_files = image_files.filter(image => {
        //  Remove .jpeg
        image = image.substring(0, 10)
        let weekday = moment(image).weekday()
        let isWeekEnd =  weekday == 5 || weekday == 6
        let includeDay = include_weekends ? true : isWeekEnd ? false : true 

        return moment(image).isSameOrAfter(from) && moment(image).isSameOrBefore(to) && includeDay    
    })

    //Sort in desendent order.
    image_files.sort()
    image_files.reverse()    

    //  Generates string of tag images
    let fs_assets_folder = path.join('file://', assets_folder)

    let image_tags_string = image_files.reduce((current, image_file, index) => {
        let image_path = path.join(fs_assets_folder, 'charts','days', image_file)
        current += `<img src="${image_path}" class="user_logs_per_day"> \n`
        
        return current
    }, '')
    
    //  Replace variables in template
    html_template = replaceAll(html_template, '{{cover_logo}}', `${fs_assets_folder}/img/cover_logo.png`)
    html_template = replaceAll(html_template, '{{header_logo}}', `${fs_assets_folder}/img/header_logo.png`)

    html_template = replaceAll(html_template, '{{logs_of_the_week}}', `${fs_assets_folder}/charts/logs_of_the_week.jpeg`)
    html_template = replaceAll(html_template, '{{logs_of_the_month}}', `${fs_assets_folder}/charts/logs_of_the_month.jpeg`)
    html_template = replaceAll(html_template, '{{logs_of_the_year}}', `${fs_assets_folder}/charts/logs_of_the_year.jpeg`)
    html_template = replaceAll(html_template, '{{images_per_day}}', image_tags_string)
    html_template = replaceAll(html_template, '{{server_name}}',  serverName)
    html_template = replaceAll(html_template, '{{date_from_to}}', `De ${formated_from} a ${formated_to}`)

    // console.log(html_template);
    
    return new Promise((resolve, reject) => {

        const pdf_options = { 
            format: 'Letter',
            header: {
                height: "20mm"
              },
            footer: {
                height: "15mm"
            },
            script: !!process.pkg ? path.join(project_folder, 'phantom', 'pdf_a4_portrait.js'): undefined
        }
        
        pdf.create(html_template, pdf_options).toFile(`${assets_folder}/docs/${filename}.pdf`, function(err, res) {
            if (err){
                reject(err)
            }else{
                resolve('Documento generado.')
            }
        })
    })
    
    

}

module.exports = {
    generatePDF
}

// generatePDF({
//     filename: `test.pdf`,
//     serverName: 'TEST SERVER',
//     from: '2018-09-03',
//     to: '2018-09-10'
// }).then(r => console.log(r))
